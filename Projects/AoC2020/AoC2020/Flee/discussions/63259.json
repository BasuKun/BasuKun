[
  {
    "Id": "215032",
    "ThreadId": "63259",
    "Html": "<p>Eugene,</p>\r\n<p>I would like to say that this project is great and that I've been following it for a while and I'm planning on using it in a future project.  One aspect of my project will be to give my users an interface to update and change their Formulas.  However, I need a Framework that can support this type of interface.</p>\r\n<p>This has led me to some thoughts on ways to make the CalculationEngine in Flee transparent, more agile, and stay fully functional in any project someone wants to use it in.</p>\r\n<p>First, and probably the easiest to implement would be the ability to rename Expressions already loaded to the CalculationEngine.  It would need to also do a find and replace on it's precedents and dependents to prevent logic from breaking.</p>\r\n<p>Next, and I don't even know if this will be possible, but create some attributes for properties, and if needed classes, that tie this properties to the CalculationEngine. This would allow users to use Flee's Calculation Engine in any project with extreme ease. This would probably require an interface that the class would have to inherit in order to properly work, but this type of approach would separate someones business layer up from their data layer.</p>\r\n<p>One pit fall that keeps coming up is a way to handle the set method on the tagged property. I know through reflection that it's possible to tie an event to this when the value changes, but I haven't been successful. You would have the same problem if the Expression's name is set by another property.</p>\r\n<p>Thanks for a wonderful project,<br> MindCore</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> Worksheet : IExpressionContainer \r\n</span>{ \r\n     <span style=\"color:Blue\">private</span> ExpressionContext _context; \r\n\r\n     <span style=\"color:Green\">// The Expression Attribute could except a string representing </span>\r\n     <span style=\"color:Green\">// the formula's name or maybe even the name of another </span>\r\n     <span style=\"color:Green\">// property containing the formula's name.) </span>\r\n     [Expression(<span style=\"color:#A31515\">&quot;formulaname&quot;</span>)] \r\n     <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">string</span> Formula { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">set</span>; } \r\n\r\n     <span style=\"color:Green\">// implemented from IExpressionContainer </span>\r\n     <span style=\"color:Blue\">public</span> ExpressionContext Context { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">set</span>; } \r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-07-22T16:50:34.797-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]