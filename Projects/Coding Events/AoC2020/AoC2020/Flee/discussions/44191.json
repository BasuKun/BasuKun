[
  {
    "Id": "147043",
    "ThreadId": "44191",
    "Html": "First sorry for my pool english.<br>\r\n<br>\r\n<ol>\r\n    <li>Could a ExpressionContext or VariableCollection have a Parent?<br>\r\n    Let it provide a Scope future, if it can't find a variable or function in current context it can ask its parent for one.<br>\r\n    The event-drived-finding is hard to use.</li>\r\n    <li>Could you privde a ScriptLanguageModel?<br>\r\n    Means let it more like javascript, the number 1 is equals the string &quot;1&quot;,and 1 or 0 can use as bool true or false.</li>\r\n</ol>\r\n<br>\r\nI have a last questions,Why you remove the ExpressionFactory? you can keep it. Now I must modify most of my code to update to 0.9.21. \r\n",
    "PostedDate": "2009-01-14T07:29:46.887-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "147544",
    "ThreadId": "44191",
    "Html": "&gt;Could a ExpressionContext or VariableCollection have a Parent?<br>\r\nCan you tell me more about what you're trying to accomplish?&nbsp; This is a core feature and I want to make sure I get a good grasp of your requirements.<br>\r\n<br>\r\n&gt;Could you privde a ScriptLanguageModel?<br>\r\nFlee is designed around being a static language.&nbsp; Making it work like a dynamic language would take a lot of effort which I can't dedicate right now.<br>\r\n<br>\r\n&gt;I have a last questions,Why you remove the ExpressionFactory? <br>\r\nOnce I put the compile method on the expression context, the expression factory class wasn't needed anymore.&nbsp; One of my goals for Flee is that it has a nice, clean api.&nbsp; When I make a bad design decision, I usually break backwards compatibility in order to keep Flee's design clean. \r\n",
    "PostedDate": "2009-01-15T16:46:57.43-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "147581",
    "ThreadId": "44191",
    "Html": "Thank you first.Look like my English is very bad. hehe.<br><br>At beginning,I want to find a Javascript Script Engine base on .Net(Like Java 6's Rhino Script Engine).<br>Finally I find your FLEE, but it's only a Expression Engine. <br>So I decided to use FLEE to explain expression, and I develop some WinForm control to implement the statement behavior(like for/while/foreach).<br>Normally, any variable in some statement scope( for(int i = 0;;) ) hide one with the same name outside, and if there is no variable with the name inside it will find it outside.<br>So I think the ExpressionContext or VariableCollection could have a parent.when current context can't find some variable or function it can ask its parent for it.Then I Just need a Stack, when I enter a scope I push a ExpressionContext in,and when I leave I just pop it out.<br>And I think it easy to use for someone who often work with multi context,he don't need to import any common type or function or shared variable for each ExpressionContext.<br><br>I'm not sure I clearly described what I'm thinking.and I wrote some code :<div><br></div><div><div>internal static class Program</div><div><span style=\"white-space:pre\">\t</span>{</div><div><span style=\"white-space:pre\">\t\t</span>/// &lt;summary&gt;</div><div><span style=\"white-space:pre\">\t\t</span>/// 应用程序的主入口点。</div><div><span style=\"white-space:pre\">\t\t</span>/// &lt;/summary&gt;</div><div><span style=\"white-space:pre\">\t\t</span>[STAThread]</div><div><span style=\"white-space:pre\">\t\t</span>private static void Main()</div><div><span style=\"white-space:pre\">\t\t</span>{</div><div><span style=\"white-space:pre\">\t\t\t</span>var context1 = new ExpressionContext();</div><div><span style=\"white-space:pre\">\t\t\t</span>context1.Variables.Add(&quot;v1&quot;, 1);</div><div><span style=\"white-space:pre\">\t\t\t</span>var context2 = new ExpressionContext();</div><div><span style=\"white-space:pre\">\t\t\t</span>context2.Variables.Add(&quot;v2&quot;, 2);</div><div><span style=\"white-space:pre\">\t\t\t</span>var context3 = new ExpressionContext();</div><div><span style=\"white-space:pre\">\t\t\t</span>context3.Variables.Add(&quot;v3&quot;, 3);</div><div><span style=\"white-space:pre\">\t\t\t</span>var scope = new ExpressionContextScope();</div><div><span style=\"white-space:pre\">\t\t\t</span>scope.Push(context1);</div><div><span style=\"white-space:pre\">\t\t\t</span>scope.Push(context2);</div><div><span style=\"white-space:pre\">\t\t\t</span>scope.Push(context3);</div><div><span style=\"white-space:pre\">\t\t\t</span>var dynamic = context3.CompileDynamic(&quot;v1&quot;);</div><div><span style=\"white-space:pre\">\t\t\t</span>Console.WriteLine(dynamic.Evaluate());</div><div><br></div><div><span style=\"white-space:pre\">\t\t\t</span>Console.Read();</div><div><span style=\"white-space:pre\">\t\t</span>}</div><div><span style=\"white-space:pre\">\t</span>}</div><div><br></div><div><span style=\"white-space:pre\">\t</span>public class ExpressionContextScope</div><div><span style=\"white-space:pre\">\t</span>{</div><div><span style=\"white-space:pre\">\t\t</span>readonly Stack&lt;Node&gt; _nodes = new Stack&lt;Node&gt;();</div><div><br></div><div><span style=\"white-space:pre\">\t\t</span>public ExpressionContext Peek()</div><div><span style=\"white-space:pre\">\t\t</span>{</div><div><span style=\"white-space:pre\">\t\t\t</span>return _nodes.Peek().Context;</div><div><span style=\"white-space:pre\">\t\t</span>}</div><div><br></div><div><span style=\"white-space:pre\">\t\t</span>public ExpressionContext Pop()</div><div><span style=\"white-space:pre\">\t\t</span>{</div><div><span style=\"white-space:pre\">\t\t\t</span>var pop = _nodes.Pop();</div><div><span style=\"white-space:pre\">\t\t\t</span>pop.Delink();</div><div><span style=\"white-space:pre\">\t\t\t</span>return pop.Context;</div><div><span style=\"white-space:pre\">\t\t</span>}</div><div><br></div><div><span style=\"white-space:pre\">\t\t</span>public void Push(ExpressionContext item)</div><div><span style=\"white-space:pre\">\t\t</span>{</div><div><span style=\"white-space:pre\">\t\t\t</span>if (_nodes.Count != 0)</div><div><span style=\"white-space:pre\">\t\t\t\t</span>_nodes.Push(new Node(item, _nodes.Peek().Context));</div><div><span style=\"white-space:pre\">\t\t\t</span>else</div><div><span style=\"white-space:pre\">\t\t\t\t</span>_nodes.Push(new Node(item, null));</div><div><span style=\"white-space:pre\">\t\t</span>}</div><div><br></div><div><span style=\"white-space:pre\">\t\t</span>private class Node</div><div><span style=\"white-space:pre\">\t\t</span>{</div><div><span style=\"white-space:pre\">\t\t\t</span>public Node(ExpressionContext context, ExpressionContext parent)</div><div><span style=\"white-space:pre\">\t\t\t</span>{</div><div><span style=\"white-space:pre\">\t\t\t\t</span>if (context == null) throw new ArgumentNullException(&quot;context&quot;);</div><div><span style=\"white-space:pre\">\t\t\t\t</span>Context = context;</div><div><span style=\"white-space:pre\">\t\t\t\t</span>if(parent != null)</div><div><span style=\"white-space:pre\">\t\t\t\t</span>{</div><div><span style=\"white-space:pre\">\t\t\t\t\t</span>Parent = parent;</div><div><span style=\"white-space:pre\">\t\t\t\t\t</span>Link();</div><div><span style=\"white-space:pre\">\t\t\t\t</span>}</div><div><span style=\"white-space:pre\">\t\t\t</span>}</div><div><br></div><div><span style=\"white-space:pre\">\t\t\t</span>public ExpressionContext Context { get; set; }</div><div><br></div><div><span style=\"white-space:pre\">\t\t\t</span>public ExpressionContext Parent { get; set; }</div><div><br></div><div><span style=\"white-space:pre\">\t\t\t</span>public void Link()</div><div><span style=\"white-space:pre\">\t\t\t</span>{</div><div><span style=\"white-space:pre\">\t\t\t\t</span>var variables = Context.Variables;</div><div><span style=\"white-space:pre\">\t\t\t\t</span>variables.ResolveFunction += ResolveFunction;</div><div><span style=\"white-space:pre\">\t\t\t\t</span>variables.InvokeFunction += InvokeFunction;</div><div><span style=\"white-space:pre\">\t\t\t\t</span>variables.ResolveVariableType += ResolveVariableType;</div><div><span style=\"white-space:pre\">\t\t\t\t</span>variables.ResolveVariableValue += ResolveVariableValue;</div><div><span style=\"white-space:pre\">\t\t\t</span>}</div><div><br></div><div><span style=\"white-space:pre\">\t\t\t</span>private void ResolveFunction(object sender, ResolveFunctionEventArgs e)</div><div><span style=\"white-space:pre\">\t\t\t</span>{</div><div><span style=\"white-space:pre\">\t\t\t\t</span>// There is no any method can provide the function's return type that containing in Parent context</div><div><span style=\"white-space:pre\">\t\t\t\t</span>// e.ReturnType = Parent.Variables.ResolveFunction(e.FunctionName, e.ArgumentTypes);</div><div><span style=\"white-space:pre\">\t\t\t\t</span>e.ReturnType = typeof (object);</div><div><span style=\"white-space:pre\">\t\t\t</span>}</div><div><br></div><div><span style=\"white-space:pre\">\t\t\t</span>private void InvokeFunction(object sender, InvokeFunctionEventArgs e)</div><div><span style=\"white-space:pre\">\t\t\t</span>{</div><div><span style=\"white-space:pre\">\t\t\t\t</span>// e.Result = Parent.Variables.GetFunctionResultInternal&lt;object&gt;(e.FunctionName, e.Arguments);</div><div><span style=\"white-space:pre\">\t\t\t</span>}</div><div><br></div><div><span style=\"white-space:pre\">\t\t\t</span>private void ResolveVariableType(object sender, ResolveVariableTypeEventArgs e)</div><div><span style=\"white-space:pre\">\t\t\t</span>{</div><div><span style=\"white-space:pre\">\t\t\t\t</span>// This doesn't works,because GetVariableType method doesn't occur the Parent's ResolveVariableType event.</div><div><span style=\"white-space:pre\">\t\t\t\t</span>// e.VariableType = Parent.Variables.GetVariableType(e.VariableName);</div><div><br></div><div><span style=\"white-space:pre\">\t\t\t\t</span>e.VariableType = typeof (object);</div><div><span style=\"white-space:pre\">\t\t\t</span>}</div><div><br></div><div><span style=\"white-space:pre\">\t\t\t</span>private void ResolveVariableValue(object sender, ResolveVariableValueEventArgs e)</div><div><span style=\"white-space:pre\">\t\t\t</span>{</div><div><span style=\"white-space:pre\">\t\t\t\t</span>// Because I can't find the type of Parent's variable, there code doesn't work.</div><div><span style=\"white-space:pre\">\t\t\t\t</span>// var method = Parent.Variables.GetType().GetMethod(&quot;GetVariableValueInternal&quot;).MakeGenericMethod(e.VariableType);</div><div><span style=\"white-space:pre\">\t\t\t\t</span>// e.VariableValue = method.Invoke(Parent.Variables, new object[] {e.VariableName});</div><div><span style=\"white-space:pre\">\t\t\t</span>}</div><div><br></div><div><span style=\"white-space:pre\">\t\t\t</span>public void Delink()</div><div><span style=\"white-space:pre\">\t\t\t</span>{</div><div><span style=\"white-space:pre\">\t\t\t\t</span>var variables = Context.Variables;</div><div><span style=\"white-space:pre\">\t\t\t\t</span>variables.ResolveFunction -= ResolveFunction;</div><div><span style=\"white-space:pre\">\t\t\t\t</span>variables.InvokeFunction -= InvokeFunction;</div><div><span style=\"white-space:pre\">\t\t\t\t</span>variables.ResolveVariableType -= ResolveVariableType;</div><div><span style=\"white-space:pre\">\t\t\t\t</span>variables.ResolveVariableValue -= ResolveVariableValue;</div><div><span style=\"white-space:pre\">\t\t\t</span>}</div><div><span style=\"white-space:pre\">\t\t</span>}</div><div><span style=\"white-space:pre\">\t</span>}</div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><br>I agree with you to keep API clean.But remove some important part may cause some trouble.Fix code is not interesting.<br><br></div><div>Last question : There are some name of methods in VariableCollection end with Internal,Why they are public, not internal ?</div><div><br>And Thinks again.<br></div>",
    "PostedDate": "2009-01-15T19:33:02.873-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "147612",
    "ThreadId": "44191",
    "Html": "<div>public class ExpressionContextScope</div><div><span style=\"white-space:pre\">\t</span>{</div><div><span style=\"white-space:pre\">\t\t</span>private readonly Stack&lt;Node&gt; _nodes = new Stack&lt;Node&gt;();</div><div><br></div><div><span style=\"white-space:pre\">\t\t</span>public ExpressionContext Peek()</div><div><span style=\"white-space:pre\">\t\t</span>{</div><div><span style=\"white-space:pre\">\t\t\t</span>return _nodes.Peek().Context;</div><div><span style=\"white-space:pre\">\t\t</span>}</div><div><br></div><div><span style=\"white-space:pre\">\t\t</span>public ExpressionContext Pop()</div><div><span style=\"white-space:pre\">\t\t</span>{</div><div><span style=\"white-space:pre\">\t\t\t</span>var pop = _nodes.Pop();</div><div><span style=\"white-space:pre\">\t\t\t</span>pop.Delink();</div><div><span style=\"white-space:pre\">\t\t\t</span>return pop.Context;</div><div><span style=\"white-space:pre\">\t\t</span>}</div><div><br></div><div><span style=\"white-space:pre\">\t\t</span>public void Push(ExpressionContext item)</div><div><span style=\"white-space:pre\">\t\t</span>{</div><div><span style=\"white-space:pre\">\t\t\t</span>if (_nodes.Count != 0)</div><div><span style=\"white-space:pre\">\t\t\t\t</span>_nodes.Push(new Node(item, _nodes.Peek()));</div><div><span style=\"white-space:pre\">\t\t\t</span>else</div><div><span style=\"white-space:pre\">\t\t\t\t</span>_nodes.Push(new Node(item, null));</div><div><span style=\"white-space:pre\">\t\t</span>}</div><div><br></div><div><span style=\"white-space:pre\">\t\t</span>private class Node</div><div><span style=\"white-space:pre\">\t\t</span>{</div><div><span style=\"white-space:pre\">\t\t\t</span>public Node(ExpressionContext context, Node parent)</div><div><span style=\"white-space:pre\">\t\t\t</span>{</div><div><span style=\"white-space:pre\">\t\t\t\t</span>if (context == null) throw new ArgumentNullException(&quot;context&quot;);</div><div><span style=\"white-space:pre\">\t\t\t\t</span>Context = context;</div><div><span style=\"white-space:pre\">\t\t\t\t</span>if (parent == null) return;</div><div><span style=\"white-space:pre\">\t\t\t\t</span>Parent = parent;</div><div><span style=\"white-space:pre\">\t\t\t\t</span>Link();</div><div><span style=\"white-space:pre\">\t\t\t</span>}</div><div><br></div><div><span style=\"white-space:pre\">\t\t\t</span>public ExpressionContext Context { get; set; }</div><div><br></div><div><span style=\"white-space:pre\">\t\t\t</span>public Node Parent { get; set; }</div><div><br></div><div><span style=\"white-space:pre\">\t\t\t</span>public void Link()</div><div><span style=\"white-space:pre\">\t\t\t</span>{</div><div><span style=\"white-space:pre\">\t\t\t\t</span>var variables = Context.Variables;</div><div><span style=\"white-space:pre\">\t\t\t\t</span>variables.ResolveVariableType += ResolveVariableType;</div><div><span style=\"white-space:pre\">\t\t\t\t</span>variables.ResolveVariableValue += ResolveVariableValue;</div><div><span style=\"white-space:pre\">\t\t\t</span>}</div><div><br></div><div><span style=\"white-space:pre\">\t\t\t</span>public void Delink()</div><div><span style=\"white-space:pre\">\t\t\t</span>{</div><div><span style=\"white-space:pre\">\t\t\t\t</span>var variables = Context.Variables;</div><div><span style=\"white-space:pre\">\t\t\t\t</span>variables.ResolveVariableType -= ResolveVariableType;</div><div><span style=\"white-space:pre\">\t\t\t\t</span>variables.ResolveVariableValue -= ResolveVariableValue;</div><div><span style=\"white-space:pre\">\t\t\t</span>}</div><div><br></div><div><span style=\"white-space:pre\">\t\t\t</span>public Type GetVariableType(string name)</div><div><span style=\"white-space:pre\">\t\t\t</span>{</div><div><span style=\"white-space:pre\">\t\t\t\t</span>if (Context.Variables.ContainsKey(name))</div><div><span style=\"white-space:pre\">\t\t\t\t\t</span>return Context.Variables[name].GetType();</div><div><span style=\"white-space:pre\">\t\t\t\t</span>if (Parent != null) return Parent.GetVariableType(name);</div><div><span style=\"white-space:pre\">\t\t\t\t</span>throw new InvalidOperationException(&quot;变量不存在&quot;);</div><div><span style=\"white-space:pre\">\t\t\t</span>}</div><div><br></div><div><br></div><div><span style=\"white-space:pre\">\t\t\t</span>private object GetVariableValue(string name)</div><div><span style=\"white-space:pre\">\t\t\t</span>{</div><div><span style=\"white-space:pre\">\t\t\t\t</span>if (Context.Variables.ContainsKey(name))</div><div><span style=\"white-space:pre\">\t\t\t\t\t</span>return Context.Variables[name];</div><div><span style=\"white-space:pre\">\t\t\t\t</span>if (Parent != null) return Parent.GetVariableValue(name);</div><div><span style=\"white-space:pre\">\t\t\t\t</span>throw new InvalidOperationException(&quot;变量不存在&quot;);</div><div><span style=\"white-space:pre\">\t\t\t</span>}</div><div><br></div><div><span style=\"white-space:pre\">\t\t\t</span>private void ResolveVariableType(object sender, ResolveVariableTypeEventArgs e)</div><div><span style=\"white-space:pre\">\t\t\t</span>{</div><div><span style=\"white-space:pre\">\t\t\t\t</span>e.VariableType = GetVariableType(e.VariableName);</div><div><span style=\"white-space:pre\">\t\t\t</span>}</div><div><br></div><div><span style=\"white-space:pre\">\t\t\t</span>private void ResolveVariableValue(object sender, ResolveVariableValueEventArgs e)</div><div><span style=\"white-space:pre\">\t\t\t</span>{</div><div><span style=\"white-space:pre\">\t\t\t\t</span>e.VariableValue = GetVariableValue(e.VariableName);</div><div><span style=\"white-space:pre\">\t\t\t</span>}</div><div><span style=\"white-space:pre\">\t\t</span>}</div><div><span style=\"white-space:pre\">\t</span>}</div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div>This class resovled my problem, but I still can't find a way to invoke functions in parent.</div><div><br></div><div>And there is a small bug in VariableCollection.TryGetValue(), local variable &quot;bool flag&quot; doesn't do his duty. it always be false.</div>",
    "PostedDate": "2009-01-15T23:23:04.067-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]