[
  {
    "Id": "207597",
    "ThreadId": "61215",
    "Html": "<p>If I use directly DateTime objects in the equation, its throwing an error but if I create varaibles and use the variables in the equation then its working fine. Does it mean that variables are needed for the DateTime equations? if yes then whenever equations get updated then need to update the variables ??</p>\r\n<p>&nbsp;Option 1:</p>\r\n<p>engine.Add(&quot;DateDiff1&quot;, &quot;DateTime.Parse(\\&quot;1/1/2010\\&quot;) - DateTime.Parse(\\&quot;1/1/2009\\&quot;)&quot;, context);</p>\r\n<p>object obj = engine.GetResult(&quot;DateDiff1&quot;);</p>\r\n<p>Option 2:</p>\r\n<p>variables.Add(&quot;Date1&quot;, DateTime.Parse(&quot;1/1/2009&quot;));</p>\r\n<p>variables.Add(&quot;Date2&quot;, DateTime.Parse(&quot;1/1/2010&quot;));</p>\r\n<p>engine.Add(&quot;DateDiff2&quot;, &quot;Date2-Date1&quot;, context);</p>\r\n<p>obj = engine.GetResult(&quot;DateDiff2&quot;);</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks,</p>",
    "PostedDate": "2009-07-01T09:24:20.057-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "207755",
    "ThreadId": "61215",
    "Html": "<p>Are you importing the DateTime type into your context?</p>\r\n<p>The following code works:</p>\r\n<p>CalculationEngine engine = new CalculationEngine();<br>ExpressionContext context = new ExpressionContext();<br>context.Imports.AddType(typeof(DateTime), &quot;DateTime&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Import the DateTime functions under the &quot;DateTime&quot; prefix<br>engine.Add(&quot;DateDiff1&quot;, &quot;DateTime.Parse(\\&quot;1/1/2010\\&quot;) - DateTime.Parse(\\&quot;1/1/2009\\&quot;)&quot;, context);<br><br>object obj = engine.GetResult(&quot;DateDiff1&quot;);</p>\r\n<p>The error message that you get if you don't import the DateTime type is not very helpful so I'll try to make it better.</p>\r\n<p>However, FLEE supports DateTime <a title=literals href=\"http://flee.codeplex.com/Wiki/View.aspx?title=LanguageReference#Literals\">literals</a>, so you can write the following instead:</p>\r\n<p>CalculationEngine engine = new CalculationEngine();<br>ExpressionContext context = new ExpressionContext();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>engine.Add(&quot;DateDiff1&quot;, &quot;#01/01/2010# - #01/01/2009#&quot;, context);<br><br>object obj = engine.GetResult(&quot;DateDiff1&quot;);</p>\r\n<p>You can use the context.ParserOptions.DateTimeFormat to control the format string for DateTime literals.&nbsp; By default, it is set to the short date string for the current culture.</p>",
    "PostedDate": "2009-07-01T16:16:10.61-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "208980",
    "ThreadId": "61215",
    "Html": "<p>&nbsp;</p>\r\n<p>Thanks for your reply.</p>\r\n<p>I'm still getting errors if I use context object instead of engine:</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExpressionContext context = new ExpressionContext();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.Imports.AddType(typeof(DateTime), &quot;DateTime&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //context.Variables.Add(&quot;Date1&quot;, &quot;DateTime.Parse(\\&quot;1/1/2010\\&quot;)&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //context.Variables.Add(&quot;Date2&quot;, &quot;DateTime.Parse(\\&quot;1/1/2009\\&quot;)&quot;);</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.Variables.Add(&quot;Date1&quot;, &quot;#1/1/2009#&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.Variables.Add(&quot;Date2&quot;, &quot;#1/1/2010#&quot;);</p>\r\n<p><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IDynamicExpression exp =&nbsp; context.CompileDynamic(&quot;if(Date1 &gt; Date2,true,false)&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string value =&nbsp; exp.Evaluate().ToString();</p>",
    "PostedDate": "2009-07-06T08:37:13.87-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "209657",
    "ThreadId": "61215",
    "Html": "<p>Can you post the error details?</p>",
    "PostedDate": "2009-07-07T13:50:35.643-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "209931",
    "ThreadId": "61215",
    "Html": "<p>The error is raised at context.CompileDynamic and here is the error message:</p>\r\n<p><span style=\"font-size:xx-small\">\r\n<p>ex.Message</p>\r\n<p>&quot;CompareElement: Operation 'GreaterThan' is not defined for types 'String' and 'String'&quot;</p>\r\n<p>ex.StackTrace</p>\r\n<p>&quot; at Ciloci.Flee.ExpressionElement.ThrowCompileException(String messageKey, CompileExceptionReason reason, Object[] arguments)\\r\\n at Ciloci.Flee.BinaryExpressionElement.ThrowOperandTypeMismatch(Object operation, Type leftType, Type rightType)\\r\\n at Ciloci.Flee.BinaryExpressionElement.ValidateInternal(Object op)\\r\\n at Ciloci.Flee.BinaryExpressionElement.Configure(ExpressionElement leftChild, ExpressionElement rightChild, Object op)\\r\\n at Ciloci.Flee.BinaryExpressionElement.CreateElement(IList childValues, Type elementType)\\r\\n at Ciloci.Flee.FleeExpressionAnalyzer.AddBinaryOp(Production node, Type elementType)\\r\\n at Ciloci.Flee.FleeExpressionAnalyzer.ExitCompareExpression(Production node)\\r\\n at Ciloci.Flee.ExpressionAnalyzer.Exit(Node node)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.Parser.ExitNode(Node node)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseAlternative(ProductionPatternAlternative alt)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.R</p>\r\n<p>untime.RecursiveDescentParser.ParsePattern(ProductionPattern pattern)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseElement(Production node, ProductionPatternElement elem)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseAlternative(ProductionPatternAlternative alt)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParsePattern(ProductionPattern pattern)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseElement(Production node, ProductionPatternElement elem)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseAlternative(ProductionPatternAlternative alt)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParsePattern(ProductionPattern pattern)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseElement(Production node, ProductionPatternElement elem)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.Recur</p>\r\n<p>siveDescentParser.ParseAlternative(ProductionPatternAlternative alt)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParsePattern(ProductionPattern pattern)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseElement(Production node, ProductionPatternElement elem)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseAlternative(ProductionPatternAlternative alt)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParsePattern(ProductionPattern pattern)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseElement(Production node, ProductionPatternElement elem)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseAlternative(ProductionPatternAlternative alt)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParsePattern(ProductionPattern pattern)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.Pars</p>\r\n<p>eElement(Production node, ProductionPatternElement elem)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseAlternative(ProductionPatternAlternative alt)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParsePattern(ProductionPattern pattern)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseElement(Production node, ProductionPatternElement elem)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseAlternative(ProductionPatternAlternative alt)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParsePattern(ProductionPattern pattern)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseElement(Production node, ProductionPatternElement elem)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseAlternative(ProductionPatternAlternative alt)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.Parse</p>\r\n<p>Pattern(ProductionPattern pattern)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseElement(Production node, ProductionPatternElement elem)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseAlternative(ProductionPatternAlternative alt)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParsePattern(ProductionPattern pattern)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseElement(Production node, ProductionPatternElement elem)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseAlternative(ProductionPatternAlternative alt)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParsePattern(ProductionPattern pattern)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseElement(Production node, ProductionPatternElement elem)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseAlternative(</p>\r\n<p>ProductionPatternAlternative alt)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParsePattern(ProductionPattern pattern)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseElement(Production node, ProductionPatternElement elem)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseAlternative(ProductionPatternAlternative alt)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParsePattern(ProductionPattern pattern)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseElement(Production node, ProductionPatternElement elem)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseAlternative(ProductionPatternAlternative alt)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParsePattern(ProductionPattern pattern)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseElement(Production node, Productio</p>\r\n<p>nPatternElement elem)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseAlternative(ProductionPatternAlternative alt)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParsePattern(ProductionPattern pattern)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseElement(Production node, ProductionPatternElement elem)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseAlternative(ProductionPatternAlternative alt)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParsePattern(ProductionPattern pattern)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseElement(Production node, ProductionPatternElement elem)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseAlternative(ProductionPatternAlternative alt)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParsePattern(ProductionPattern pattern)\\</p>\r\n<p>r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseElement(Production node, ProductionPatternElement elem)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseAlternative(ProductionPatternAlternative alt)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParsePattern(ProductionPattern pattern)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseElement(Production node, ProductionPatternElement elem)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseAlternative(ProductionPatternAlternative alt)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParsePattern(ProductionPattern pattern)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseElement(Production node, ProductionPatternElement elem)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseAlternative(ProductionPatternAlternative alt)\\r</p>\r\n<p>\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParsePattern(ProductionPattern pattern)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseElement(Production node, ProductionPatternElement elem)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseAlternative(ProductionPatternAlternative alt)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParsePattern(ProductionPattern pattern)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseElement(Production node, ProductionPatternElement elem)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseAlternative(ProductionPatternAlternative alt)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParsePattern(ProductionPattern pattern)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseElement(Production node, ProductionPatternElement elem)\\r\\n at Cilo</p>\r\n<p>ci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseAlternative(ProductionPatternAlternative alt)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParsePattern(ProductionPattern pattern)\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseStart()\\r\\n at Ciloci.Flee.PerCederberg.Grammatica.Runtime.Parser.Parse()\\r\\n at Ciloci.Flee.ExpressionContext.DoParse()\\r\\n at Ciloci.Flee.ExpressionContext.Parse(String expression, IServiceProvider services)\\r\\n at Ciloci.Flee.Expression`1.Compile(String expression, ExpressionOptions options)\\r\\n at Ciloci.Flee.Expression`1..ctor(String expression, ExpressionContext context, Boolean isGeneric)\\r\\n at Ciloci.Flee.ExpressionContext.CompileDynamic(String expression)\\r\\n at EquationEditorDemo.EquationEditor.buttonCalculate_Click(Object sender, EventArgs e) in C:\\\\EquationEditorDemo\\\\EquationEditorDemo\\\\EquationEditor.cs:line 151&quot;</p>\r\n</span></p>",
    "PostedDate": "2009-07-08T06:56:54.66-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "210112",
    "ThreadId": "61215",
    "Html": "<p>Your datetime variables are being initialized with strings instead of actual datetimes.</p>\r\n<p>It should be like this:</p>\r\n<p>ExpressionContext context = new ExpressionContext();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.Imports.AddType(typeof(DateTime), &quot;DateTime&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.Variables.Add(&quot;Date1&quot;, new DateTime(2010, 1, 1));</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.Variables.Add(&quot;Date2&quot;, new DateTime(2009, 1, 1));</p>\r\n<p><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IDynamicExpression exp =&nbsp; context.CompileDynamic(&quot;if(Date1 &gt; Date2,true,false)&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string value =&nbsp; exp.Evaluate().ToString();</p>\r\n<p>The literal notation only works inside an expression since a literal is a constant and would never need to be a variable.</p>\r\n<p>So you could do this:</p>\r\n<p>context.Variables.Add(&quot;Date1&quot;, new DateTime(2010, 1, 1));</p>\r\n<p>IDynamicExpression exp =&nbsp; context.CompileDynamic(&quot;if(Date1 &gt; #01/01/2009#, true, false)&quot;);</p>",
    "PostedDate": "2009-07-08T11:56:23.907-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]