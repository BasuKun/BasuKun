[
  {
    "Id": "93707",
    "ThreadId": "28091",
    "Html": "<span style=\"font-family:arial\">I have a high volume application. It executes about 200 concurrent reqs / sec. If I don't have any expressions to evaluate, execution time is about 10 ms per rer. If I have expressions to evaluate,  FLEE code is executed and response time shoots up to 200 ms and CPU utilization goes upto 90 percent. Any idea about how to solve this? <br>\r\n<br>\r\nThis is how I am using FLEE:<br>\r\n<br>\r\n<span style=\"font-size:13px;color:#2b91af\">\r\n<p>ExpressionContext</p>\r\n</span>\r\n<p><span style=\"font-size:13px\"> context = </span><span style=\"font-size:13px;color:#0000ff\">new</span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#2b91af\">ExpressionContext</span><span style=\"font-size:13px\">();\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<span style=\"font-size:13px\">\r\n<p>context.Imports.AddType(</p>\r\n</span>\r\n<p><span style=\"font-size:13px;color:#0000ff\">typeof</span><span style=\"font-size:13px\">(</span><span style=\"font-size:13px;color:#2b91af\">Math</span><span style=\"font-size:13px\">));<br>\r\ncontext.Imports.AddType(</span><span style=\"font-size:13px;color:#0000ff\">typeof</span><span style=\"font-size:13px\">(</span><span style=\"font-size:13px;color:#2b91af\">CustomOperations</span><span style=\"font-size:13px\">));<br>\r\n<span style=\"font-size:13px;color:#2b91af\"><br>\r\n//Code to add bunch of expression variables and values<br>\r\n<span style=\"font-size:13px\">context.Variables[</span><span style=\"font-size:13px;color:#2b91af\">ExpressionDefinitions</span><span style=\"font-size:13px\">.PID] = objExpEvalData.PubID; ... and so on.\r\n<p>&nbsp;</p>\r\n</span>\r\n<p>IGenericExpression</p>\r\n</span>\r\n<p><span style=\"font-size:13px\">&lt;</span><span style=\"font-size:13px;color:#0000ff\">bool</span><span style=\"font-size:13px\">&gt; eGeneric = </span><span style=\"font-size:13px;color:#2b91af\">ExpressionFactory</span><span style=\"font-size:13px\">.CreateGeneric&lt;</span><span style=\"font-size:13px;color:#0000ff\">bool</span><span style=\"font-size:13px\">&gt;(strExpression, context);<br>\r\n</span><span style=\"font-size:13px;color:#0000ff\">bool</span><span style=\"font-size:13px\"> blnResult = eGeneric.Evaluate();\r\n<p>&nbsp;</p>\r\n</span></p>\r\n</span></p>\r\n</span>\r\n",
    "PostedDate": "2008-05-20T11:09:54.46-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "94027",
    "ThreadId": "28091",
    "Html": "<a id=\"ctl00_ctl00_Content_TabContentPanel_Content_PostRepeater_ctl00_UserNameLink\" href=\"../../site/users/view/nimittdesai\"></a>Nimittdesai, <br>\r\n<br>\r\nI don't know if I can help you with your problem, but I just wanted to know if you were using any type of queuing or threading to concurrently execute your requests?&nbsp; <br>\r\n<br>\r\nI would expect the time it takes to evaluate an expression verses a request with no expression to be significantly higher.&nbsp; FLEE uses regular expressions to parse the formula string then builds an expression tree of formulas and parameters. Then when you call the Evaluate method it takes that expression tree and determines the result.&nbsp; This means that FLEE's performance is heavily based on the complexity of the formulas.<br>\r\n<br>\r\nReturning to my question... if you send 200 expressions of moderately to highly complex formulas to evaluate at the same time with misconfigured of no performance management, you could see your CPU utilization shoot up and ultimately create bottlenecks for other processes.<br>\r\n<br>\r\nThis is all of course a suggestion as I am no expert on FLEE.<br>\r\n<br>\r\n-Mindcore<br>\r\n<br>\r\n<br>\r\n",
    "PostedDate": "2008-05-21T13:51:46.827-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "94469",
    "ThreadId": "28091",
    "Html": "<p>This is how I am planning to solve it.<br>\r\n<br>\r\nFor every expression evaluated, cache eGeneric object in httpruntime cache with expression as key. This way eGeneric object with compiled expression already exists.  We set the context on that object and execute eGeneric.evaluate(). I modified expression.vb so that context is read/write property. New code looks like this:<span style=\"font-size:13px;color:#2b91af\">\r\n<p>&nbsp;</p>\r\n<p>IGenericExpression</p>\r\n</span></p>\r\n<p><span style=\"font-size:13px\">&lt;</span><span style=\"font-size:13px;color:#0000ff\">bool</span><span style=\"font-size:13px\">&gt; eGeneric = (</span><span style=\"font-size:13px;color:#2b91af\">IGenericExpression</span><span style=\"font-size:13px\">&lt;</span><span style=\"font-size:13px;color:#0000ff\">bool</span><span style=\"font-size:13px\">&gt;)objWebCache.Get(strExpression);\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"font-size:13px;color:#0000ff\">if</span><span style=\"font-size:13px\"> (eGeneric == </span><span style=\"font-size:13px;color:#0000ff\">null</span><span style=\"font-size:13px\">)<br>\r\n{<br>\r\neGeneric = </span><span style=\"font-size:13px;color:#2b91af\">ExpressionFactory</span><span style=\"font-size:13px\">.CreateGeneric&lt;</span><span style=\"font-size:13px;color:#0000ff\">bool</span><span style=\"font-size:13px\">&gt;(strExpression, context);<br>\r\nobjWebCache.Store(strExpression, eGeneric, cacheTTL]</span><span style=\"font-size:13px\">);<br>\r\n</span><span style=\"font-size:13px;color:#0000ff\"><br>\r\nlock</span><span style=\"font-size:13px\"> (eGeneric)<br>\r\n{<br>\r\n    blnResult = eGeneric.Evaluate();<br>\r\n}<br>\r\n}<br>\r\n</span><span style=\"font-size:13px;color:#0000ff\">else<br>\r\n</span><span style=\"font-size:13px\">{<br>\r\n</span><span style=\"font-size:13px;color:#0000ff\">lock</span><span style=\"font-size:13px\"> (eGeneric)<br>\r\n    {<br>\r\n        eGeneric.Context = context;<br>\r\n        blnResult = eGeneric.Evaluate();<br>\r\n    }<br>\r\n}<br>\r\n</span><span style=\"font-size:13px;color:#0000ff\">return</span><span style=\"font-size:13px\"> blnResult;<br>\r\n<br>\r\nDo you see any problems with this approach?\r\n<p>&nbsp;</p>\r\n</span></p>\r\n",
    "PostedDate": "2008-05-23T13:10:26.517-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]